# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance, and from and to specify date ranges
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols("AAPL", src = "yahoo", from = start, to = end)
View(AAPL)
class(AAPL)
end <- as.Date("2018-03-15")
getSymbols("AAPL", src = "yahoo", from = start, to = end)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white")
getSymbols(c("MSFT", "GOOG"), src = "yahoo", from = start, to = end)
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"],
GOOG = GOOG[, "GOOG.Close"]))
head(stocks)
plot(GOOG[, "GOOG.Close"],main = "GOOG")
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
par(new = TRUE)
plot(as.zoo(stocks[, "GOOG.Close"]), screens = 1, lty = 3, xaxt = "n", yaxt = "n",
xlab = "", ylab = "")
axis(4)
mtext("Price", side = 4, line = 3)
legend("topleft", c("AAPL (left)", "MSFT (left)", "GOOG"), lty = 1:3, cex = 0.5)
getSymbols(c("TSLA"), src = "yahoo", from = start, to = end)
plot(GOOG[, "TSLA.Close"],main = "TSLA")
plot(TSLA[, "TSLA.Close"],main = "TSLA")
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
)
plot(GOOG[, "TSLA.Close"],main = "TSLA")
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance, and from and to specify date ranges
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols("AAPL", src = "yahoo", from = start, to = end)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
# Portfolio Script
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
# Start date of portfolio
start <- as.Date("2017-01-01")
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance, and from and to specify date ranges
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
src <- "google"
end <- Sys.Date()
getSymbols("AAPL", src = "yahoo", from = start, to = end)
#View(AAPL)
#class(AAPL)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
View(vanguard)
getSymbols(vanguard$Investment.Name, start = start, end = end)
getSymbols(vanguard$Symbol, start = start, end = end)
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
getSymbols(as.character(vanguard$Symbol), start = start, end = end)
View(vanguard)
View(VINAX)
# Portfolio Script
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(zoo)
library(plotly)
# Start date of portfolio
start <- as.Date("2017-01-01")
end <- Sys.Date()
src <- "google"
# We load a csv with our vanguard portfolio
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
# We use the quantmod function getSymbols
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols(as.character(vanguard$Symbol), src = src, from = start, to = end)
# Portfolio Script
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(zoo)
library(plotly)
# Start date of portfolio
start <- as.Date("2017-01-01")
end <- Sys.Date()
src <- "yahoo"
# We load a csv with our vanguard portfolio
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
# We use the quantmod function getSymbols
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols(as.character(vanguard$Symbol), src = src, from = start, to = end)
View(VMMXX)
View(VMFXX)
View(VINAX)
View(VBLTX)
View(VOOG)
View(VOO)
View(VTIAX)
View(VOO)
View(VMMXX)
View(VMFXX)
# Portfolio Script
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
library(PortfolioAnalytics)
library(PerformanceAnalytics)
library(zoo)
library(plotly)
# Start date of portfolio
start <- as.Date("2017-01-01")
end <- Sys.Date()
src <- "yahoo"
# We load a csv with our vanguard portfolio
vanguard <- read.csv("~/development/rstocks/ofxdownload.csv")
# We use the quantmod function getSymbols
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols(as.character(vanguard$Symbol), src = src, from = start, to = end)
View(VINAX)
View(TSLA)
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white")
candleChart(IBM)
closing_prices <- rbind(JNJ,IBM)
View(closing_prices)
closing_prices <- merge.zoo(JNJ,IBM)
class(closing_prices)
summary(closing_prices)
closing_prices <- as.data.frame(merge.zoo(JNJ,IBM))
View(closing_prices)
closing_prices <- as.data.frame(merge.zoo(JNJ[,6],IBM[,6]))
View(closing_prices)
closing_prices <- as.data.frame(merge.zoo(as.zoo(vanguard$Symbol[,6])))
closing_prices <- as.data.frame(merge.zoo(as.zoo(vanguard$Symbol)[,6]))
View(closing_prices)
closing_prices <- as.data.frame(merge.zoo(COST[,6],DHR[,6],IBM[,6]))
View(closing_prices)
closing_prices <- as.data.frame(merge.zoo(AAPL[,6],ADNT[,6],AMZN[,6],BLV[,6],BMY[,6],BRK-B[,6],CDK[,6],COST[,6],DHR[,6],IBM[,6],JNJ[,6],MRK[,6],RDS-A[,6],T[,6],TSLA[,6],UN[,6]))
closing_prices <- as.data.frame(merge.zoo(AAPL[,6],ADNT[,6],AMZN[,6],BLV[,6],BMY[,6],CDK[,6],COST[,6],DHR[,6],IBM[,6],JNJ[,6],MRK[,6],RDS-A[,6],T[,6],TSLA[,6],UN[,6]))
closing_prices <- as.data.frame(merge.zoo(AAPL[,6],ADNT[,6],AMZN[,6],BLV[,6],BMY[,6],CDK[,6],COST[,6],DHR[,6],IBM[,6],JNJ[,6],MRK[,6],T[,6],TSLA[,6],UN[,6]))
View(closing_prices)
# Get me my beloved pipe operator!
if (!require("magrittr")) {
install.packages("magrittr")
library(magrittr)
}
stock_return = apply(closing_prices, 1, function(x) {x / closing_prices[1,]}) %>%
t %>% as.xts
head(stock_return)
View(closing_prices)
summary(closing_prices)
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white", subset = "2016-01-04/")
addSMA(n = c(20, 50, 200))
